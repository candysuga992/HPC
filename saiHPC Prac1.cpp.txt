#include<iostream>
#include<vector>
#include<queue>
#include<stack>
#include<omp.h>

using namespace std;

class Graph
{
    int V;
    vector<vector<int>> adj;
    
public:
        Graph(int vertices) : V(vertices),adj(vertices){}
        
        void addEdges(int u,int v)
        {
            adj[u].push_back(v);
            adj[v].push_back(u);
            
        }
        
        void BFS(int start)
        {
            vector<bool> visited(V,false);
            queue<int> q;
            
            
            visited[start]=true;
            q.push(start);
            
            while(!q.empty())
            {
                int u=q.front();
                q.pop();
                cout<<u<<" ";
                
                
                #pragma omp parallel for
                for(int v : adj[u])
                {
                    if(!visited[v])
                    {
                        visited[v]=true;
                        q.push(v);
                    }
                }
            }
        }
        
        
        void DFS(int start)
        {
            vector<bool> visited(V,false);
            stack<int> s;
            s.push(start);
            
            while(!s.empty())
            {
                int u=s.top();
                s.pop();
                if(!visited[u])
                {
                    cout<<u<<" ";
                    visited[u]=true;
                }
                
                #pragma omp parallel for
                for(int v: adj[u])
                {
                    if(!visited[v])
                    {
                        s.push(v);
                    }
                }
            }
        }
};

int main()
{
    Graph g(7);
    g.addEdges(0,1);
    g.addEdges(0,2);
    g.addEdges(1,3);
    g.addEdges(1,4);
    g.addEdges(2,5);
    g.addEdges(2,6);
    
    cout<<"BFS Traversal:";
    g.BFS(0);
    cout<<endl;
    
    cout<<"DFS Traversal:";
    g.DFS(0);
    cout<<endl;
    
    return 0;
    
}
